name: Validate and Add Project Submission

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate:
    # Only run if the issue title contains '[Project Submission]'
    if: contains(github.event.issue.title, '[Project Submission]')
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.validate.outputs.validated }}
      name: ${{ steps.validate.outputs.name }}
      url: ${{ steps.validate.outputs.url }}
      desc: ${{ steps.validate.outputs.desc }}
      level: ${{ steps.validate.outputs.level }}

    steps:
      - name: Check required fields and extract data
        id: validate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Import 'core' for setting outputs
            const body = context.payload.issue.body || "";

            // Required fields
            const requiredFields = [
              "Project Name:",
              "Repository URL:",
              "Short Description:",
              "Contribution Level:",
              "Areas of Contribution:"
            ];

            let missing = [];
            for (const field of requiredFields) {
              if (!body.includes(field)) {
                missing.push(field);
              }
            }

            if (missing.length > 0) {
              const message = `⚠️ Thank you for your submission! However, it looks like you are missing the following required fields:\n\n${missing.map(f => `- ${f}`).join("\n")}\n\nPlease edit your issue to include these details.`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });

              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["needs-info"]
              });

              core.setOutput('validated', 'false');
            } else {
              // Remove 'needs-info' if it was previously present and is now valid
              try {
                  await github.rest.issues.removeLabel({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: "needs-info"
                  });
              } catch (error) {
                  // Ignore error if label wasn't present
              }

              // Add "valid-submission" label
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["valid-submission"]
              });

              // Robust extraction function using non-greedy multiline match
              function escapeRegex(str) {
                return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
              }

              function cleanExtracted(value) {
                  // Remove leading/trailing asterisks, colons, and whitespace
                  return value.replace(/^(\*+|\s|:)+|(\*+|\s|:)+$/g, '');
                }

                function extract(field) {
                  // Accept optional bold (**), optional spaces, and colon
                  const fieldPattern = `\\*{0,2}\\s*${escapeRegex(field)}\\s*\\*{0,2}`;
                  let sameLine = new RegExp(`${fieldPattern}\\s*:?\\s*(.+)`, 'i');
                  let match = body.match(sameLine);
                  if (match && match[1].trim()) {
                    return cleanExtracted(match[1].trim());
                  }
                  let nextLine = new RegExp(`${fieldPattern}\\s*:?\\s*\\n\\s*(.+)`, 'i');
                  match = body.match(nextLine);
                  if (match && match[1].trim()) {
                    return cleanExtracted(match[1].trim());
                  }
                  return "";
                }

              const name = extract("Project Name");
              const url = extract("Repository URL");
              const desc = extract("Short Description");
              const level = extract("Contribution Level");
              
              // Log extracted values for debugging
              console.log("Extracted values:");
              console.log("Name:", name);
              console.log("URL:", url);
              console.log("Description:", desc);
              console.log("Level:", level);

              core.setOutput('validated', 'true');
              core.setOutput('name', name);
              core.setOutput('url', url);
              core.setOutput('desc', desc);
              core.setOutput('level', level);
            }

  create-pr:
    needs: validate
    # Only run if validation passed
    if: needs.validate.outputs.validated == 'true'
    runs-on: ubuntu-latest

    # NEW: Define environment variables at the job level for cleaner access
    env:
      PROJECT_NAME: ${{ needs.validate.outputs.name }}
      PROJECT_URL: ${{ needs.validate.outputs.url }}
      PROJECT_DESC: ${{ needs.validate.outputs.desc }}
      PROJECT_LEVEL: ${{ needs.validate.outputs.level }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Removed the error-prone 'Set project details as env vars' step

      - name: Append project entry
        run: |
          # Use shell variable expansion, which is now clean thanks to job-level env definition
          FILE="PROJECTS/BEGINNER_PROJECTS.md"
          if [[ "$PROJECT_LEVEL" =~ [Pp]rofessional ]]; then
            FILE="PROJECTS/PROFESSIONAL_PROJECTS.md"
          fi

          echo "- [$PROJECT_NAME]($PROJECT_URL) - $PROJECT_DESC" >> "$FILE"

      - name: Create PR body file
        run: |
          # Use shell variable expansion ($VAR) which is safe here
          cat > $RUNNER_TEMP/pr_body.txt << EOF
          This pull request was automatically generated from [issue #${{ github.event.issue.number }}](${{ github.event.issue.html_url }}).

          **Project Details:**
          - **Name:** ${PROJECT_NAME}
          - **Level:** ${PROJECT_LEVEL}
          - **Repository:** ${PROJECT_URL}
          - **Description:** ${PROJECT_DESC}
          EOF

      - name: Commit and create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Add project: ${{ env.PROJECT_NAME }}"
          branch: add-project-${{ github.event.issue.number }}
          title: "Add project: ${{ env.PROJECT_NAME }}"
          body-path: ${{ runner.temp }}/pr_body.txt
